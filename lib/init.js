// Generated by IcedCoffeeScript 1.4.0a
(function() {
  var default_index_content, default_layout_content, default_style_content, fs, fsextra, iced, path, __iced_k, __iced_k_noop, _ref,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  fsextra = require('fs.extra');

  path = require('path');

  _ref = [null, null, null], default_layout_content = _ref[0], default_index_content = _ref[1], default_style_content = _ref[2];

  module.exports = function() {
    var err, initPath, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    initPath = path.normalize(__dirname + '/../init');
    console.log("Generating skeleton project from '" + initPath + "'");
    try {
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/init.iced",
          funcname: "exports"
        });
        fsextra.copyRecursive(initPath, './', __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 11
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (err) console.error(err);
        console.log('  layout.html.coffee'.green);
        console.log('\tThis is the layout template that every page will share.');
        console.log('  pages/'.green);
        console.log('\tThis is where coffeecup templates go (like index.html.coffee).');
        console.log('\tThey\'ll be compiled into *.html files in the release folder.');
        console.log('  scss/'.green);
        console.log('\tThis is where the SCSS source files go.');
        console.log('\tThey\'ll be compiled into css/*.css files in the release folder.');
        console.log('  src/'.green);
        console.log('\tThis is where all your coffeescript source files will go.');
        console.log('\tThey\'ll be compiled into lib/*.js files in the release folder.');
        console.log('  static/'.green);
        return console.log('\tThis is where all your static resources (images, etc) go.');
      });
    } catch (e) {
      return console.error(e);
    }
  };

}).call(this);
