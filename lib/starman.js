// Generated by IcedCoffeeScript 1.3.3g
(function() {
  var buildOutputTemplateFilePath, cc, ccupOptions, colors, compileLayout, compilePage, compilePages, cs, default_index_content, default_layout_content, default_style_content, error, exec, fs, fsextra, iced, makeReleaseDir, path, vm, _, __iced_k, __iced_k_noop, _ref,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  fsextra = require('fs.extra');

  path = require('path');

  vm = require('vm');

  cc = require('coffeecup');

  cs = require('coffee-script');

  colors = require('colors');

  exec = require('child_process').exec;

  _ = require('underscore');

  _ref = [null, null, null], default_layout_content = _ref[0], default_index_content = _ref[1], default_style_content = _ref[2];

  compilePages = [null][0];

  module.exports.init = function() {
    console.log('Generating skeleton project...');
    try {
      fs.writeFile('layout.html.coffee', default_layout_content, function(err) {
        if (err) return console.error(err);
      });
      console.log('  layout.html.coffee'.green);
      console.log('\tThis is the layout template that every page will share.');
      fsextra.mkdirRecursiveSync('pages');
      fs.writeFile('pages/index.html.coffee', default_index_content, function(err) {
        if (err) return console.error(err);
      });
      console.log('  pages/'.green);
      console.log('\tThis is where coffeecup templates go (like index.html.coffee).');
      console.log('\tThey\'ll be compiled into *.html files in the release folder.');
      fsextra.mkdirRecursiveSync('scss');
      fs.writeFile('scss/style.scss', default_style_content, function(err) {
        if (err) return console.error(err);
      });
      console.log('  scss/'.green);
      console.log('\tThis is where the SCSS source files go.');
      console.log('\tThey\'ll be compiled into css/*.css files in the release folder.');
      fsextra.mkdirRecursiveSync('src');
      console.log('  src/'.green);
      console.log('\tThis is where all your coffeescript source files will go.');
      console.log('\tThey\'ll be compiled into lib/*.js files in the release folder.');
      fsextra.mkdirRecursiveSync('static');
      console.log('  static/'.green);
      return console.log('\tThis is where all your static resources (images, etc) go.');
    } catch (e) {
      return console.error(e);
    }
  };

  module.exports.clean = function(callback) {
    var ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "src/starman.iced",
        funcname: "clean"
      });
      exec('rm -rf release/', __iced_deferrals.defer({
        lineno: 48
      }));
      __iced_deferrals._fulfill();
    })(function() {
      console.log("Removed release directory");
      return typeof callback === "function" ? callback() : void 0;
    });
  };

  module.exports.open = function(port) {
    var err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "src/starman.iced",
        funcname: "open"
      });
      exec("open http://localhost:" + port, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return err = arguments[0];
          };
        })(),
        lineno: 53
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (typeof err !== "undefined" && err !== null) return console.error(err);
    });
  };

  module.exports.build = function(callback) {
    var copyErr, csErr, pagesErr, sassErr, stderr, stdout, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      try {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/starman.iced",
            funcname: "build"
          });
          exec('rm -rf release/', __iced_deferrals.defer({
            lineno: 58
          }));
          __iced_deferrals._fulfill();
        })(function() {
          fsextra.mkdirRecursiveSync('release');
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/starman.iced",
              funcname: "build"
            });
            fsextra.copyRecursive('./static', './release', __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return copyErr = arguments[0];
                };
              })(),
              lineno: 62
            }));
            exec('sass --scss -t expanded --update -f scss:release/css', __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return sassErr = arguments[0];
                };
              })(),
              lineno: 63
            }));
            exec('coffee -c -o release/lib/ src/', __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  csErr = arguments[0];
                  stdout = arguments[1];
                  return stderr = arguments[2];
                };
              })(),
              lineno: 63
            }));
            compilePages(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return pagesErr = arguments[0];
                };
              })(),
              lineno: 65
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (copyErr || sassErr || csErr || pagesErr) {
              throw copyErr || sassErr || csErr || pagesErr;
            }
          });
        });
      } catch (e) {
        return console.error(e);
      }
    })(function() {
      return typeof callback === "function" ? callback() : void 0;
    });
  };

  module.exports.watch = function(callback) {
    console.log('todo: watch');
    return typeof callback === "function" ? callback() : void 0;
  };

  module.exports.serve = function(port, callback) {
    var connect, portString, staticDir;
    connect = require('connect');
    staticDir = path.join(process.cwd(), 'release');
    portString = ("" + port).green;
    console.log("serving '" + staticDir.green + "' on " + portString);
    connect.createServer(connect["static"](staticDir)).listen(port);
    return typeof callback === "function" ? callback() : void 0;
  };

  makeReleaseDir = _.memoize(function(srcDir) {
    var dirChunks, releaseDir;
    dirChunks = srcDir.split(path.sep);
    dirChunks[0] = 'release';
    releaseDir = dirChunks.join(path.sep);
    fsextra.mkdirRecursiveSync(releaseDir);
    return releaseDir;
  });

  ccupOptions = {
    format: true
  };

  error = function(err) {
    if (err != null) {
      console.log(err);
      return true;
    }
    return false;
  };

  compileLayout = function(callback) {
    var layoutFileContents, layoutTemplate;
    console.log("compiling layout...");
    try {
      layoutFileContents = fs.readFileSync('layout.html.coffee').toString();
      layoutTemplate = cc.compile(layoutFileContents, ccupOptions);
      return typeof callback === "function" ? callback(layoutTemplate) : void 0;
    } catch (e) {
      console.error("failed to compile 'layout.html.coffee':");
      console.error(e);
      return typeof callback === "function" ? callback() : void 0;
    }
  };

  buildOutputTemplateFilePath = function(sourcePath) {
    var dirChunks, fileChunks;
    dirChunks = sourcePath.split(path.sep);
    dirChunks.shift();
    fileChunks = dirChunks.pop().split('.');
    fileChunks.pop();
    return path.join('release', dirChunks.join(path.sep), fileChunks.join('.'));
  };

  compilePage = function(file, layoutTemplate) {
    var compiledContents, context, outputFilePath, pageContents, prop, results, value;
    if (path.extname(file) !== '.coffee') return;
    outputFilePath = buildOutputTemplateFilePath(file);
    console.log("\t" + file + " -> " + outputFilePath);
    try {
      pageContents = fs.readFileSync(file).toString();
      compiledContents = cs.compile(pageContents, {
        bare: true
      });
      context = {};
      vm.runInNewContext(compiledContents, context);
      for (prop in context) {
        value = context[prop];
        if (typeof value !== 'function') continue;
        context[prop] = cc.render(value, context);
      }
      results = layoutTemplate(context);
      return fs.writeFile(outputFilePath, results, 'utf-8');
    } catch (e) {
      return console.error(e);
    }
  };

  compilePages = function(callback) {
    var err, layoutTemplate, options, walker, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    try {
      err = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/starman.iced",
          funcname: "compilePages"
        });
        compileLayout(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return layoutTemplate = arguments[0];
            };
          })(),
          lineno: 138
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (!(typeof layoutTemplate !== "undefined" && layoutTemplate !== null)) {
          if (typeof callback === "function") {
            callback("couldn't compile layout.html.coffee");
          }
          return;
        }
        options = {
          followLinks: false
        };
        walker = fsextra.walk('pages', options);
        walker.on('file', function(root, fileStats, next) {
          makeReleaseDir(root);
          compilePage("" + root + "/" + fileStats.name, layoutTemplate);
          return next();
        });
        walker.on("end", function() {});
        if (error(err)) {
          return typeof callback === "function" ? callback(err) : void 0;
        } else {
          return typeof callback === "function" ? callback() : void 0;
        }
      });
    } catch (e) {
      return typeof callback === "function" ? callback(e) : void 0;
    }
  };

  default_layout_content = "doctype 5\nhtml class: 'no-js', ->\n  head ->\n    meta charset: 'utf-8'\n    meta 'http-equiv': 'X-UA-Compatible', content: 'IE=edge,chrome=1'\n    title ''\n    link rel: 'stylesheet', href: '/css/style.css'\n  body ->\n    ie 'IE7', ->\n      p '.chromeframe', 'You are using an <strong>outdated</strong> browser. Please <a href=\"http://browsehappy.com/\">upgrade your browswer</a> or <a href=\"http://www.google.com/chromeframe/?redirect=true\">activate Google Chrome Frame</a> to improve your experience.'\n    div -> @body\n";

  default_index_content = "body = ->\n  p 'Welcome to Starman'\n";

  default_style_content = "body {\n  font-size: 1em;\n  line-height: 1.4;\n}\n";

}).call(this);
